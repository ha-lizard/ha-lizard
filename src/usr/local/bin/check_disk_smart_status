#!/bin/bash
################################################################################
#                                                                              #
# iscsi-ha - HA Framework for iSCSI Cluster in Xen Virtualization              #
#                                                                              #
# Purpose:                                                                     #
#    This script performs SMART checks on devices in an iSCSI cluster running  #
#    within a Xen Virtualization Environment (Xen Cloud Platform / XenServer). #
#    It scans each device for potential errors based on the SMART status and   #
#    device self-test logs, logging errors if any are found.                   #
#                                                                              #
# Usage:                                                                       #
#    ./check_disk_smart_status                                                 #
#                                                                              #
# Requirements:                                                                #
#    - smartctl (from smartmontools) must be installed on the system.          #
#    - The script requires root privileges to access SMART data from devices.  #
#                                                                              #
# License:                                                                     #
#    This script is part of iscsi-ha, distributed under the GNU General Public #
#    License v3 (GPL-3.0). You may redistribute and/or modify it under the     #
#    terms of the GPL-3.0 License.                                             #
#                                                                              #
#    iscsi-ha is distributed in the hope that it will be useful, but WITHOUT   #
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     #
#    FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  #
#    more details.                                                             #
#                                                                              #
# Author:                                                                      #
#    Salvatore Costantino                                                      #
#    ha@ixi0.com                                                               #
#                                                                              #
# Date:                                                                        #
#    2024                                                                      #
#                                                                              #
################################################################################

# List of device errors with corresponding messages
declare -A ERROR_MESSAGES
ERROR_MESSAGES=(
  [0]="Command line did not parse."
  [1]="Device open failed, device did not return an IDENTIFY DEVICE structure, or device is in a low-power mode."
  [2]="Some SMART or other ATA command to the disk failed, or there was a checksum error in a SMART data structure."
  [3]="SMART status check returned 'DISK FAILING'."
  [4]="We found prefail Attributes <= threshold."
  [5]="SMART status check returned 'DISK OK' but we found that some attributes were <= threshold at some time."
  [6]="The device error log contains records of errors."
  [7]="The device self-test log contains records of errors. [ATA only] Failed self-tests outdated by a newer successful extended self-test are ignored."
)

# Initialize an empty error message list
ERROR_MESSAGE_LIST=""

# Get the list of devices
DEVICE_LIST=$(smartctl --scan | awk '{print $1}')

# Iterate over each disk and perform SMART checks
for disk in $DEVICE_LIST; do
  echo "Found device: $disk"

  # Run smartctl and check the return status
  smartctl -q silent "$disk"
  RETVAL=$?

  # Check each bit in the return value
  for ((i = 0; i < 8; i++)); do
    THIS_BIT_VALUE=$((RETVAL & (2 ** i)))
    if [[ $THIS_BIT_VALUE -ne 0 && $i -ne 0 && $i -ne 1 ]]; then
      ERROR_MESSAGE_LIST+="${ERROR_MESSAGES[$i]}\n"
    fi
    echo "$disk: Bit $i = [ $THIS_BIT_VALUE ]"
  done
done

# If there are any errors, log and handle them
if [[ -n "$ERROR_MESSAGE_LIST" ]]; then
  echo -e "$ERROR_MESSAGE_LIST"
  exit 1
fi
