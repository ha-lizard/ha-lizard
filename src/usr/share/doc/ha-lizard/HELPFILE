HA-Lizard ha-cfg help (q to exit)

ha-status
Displays the HA status as either "true" or "false".

ha-enable
Enables HA (High Availability).

ha-disable
Disables HA (High Availability).

show-alerts
Lists all HA-Lizard alert messages.

clear-alerts
Clears all HA-Lizard alert messages.

remove
The "remove" option erases all global parameters from the XAPI database. This effectively "cleans" the database and should only be used when manually removing HA from a pool. The provided uninstall script will automatically perform this action.

log
The "log" command invokes a logging utility that displays system logs generated by HA. It is useful for observing system behavior and troubleshooting issues.

get
The "get" action lists all global parameters and their corresponding values. This is helpful for checking the current configuration and retrieving the correct syntax for parameters to be used in a "set" command.

set
The "set" action modifies the value of any global parameter. Additional command line arguments are required as follows:
"ha-cfg set <parameter> <value>"
Where <parameter> refers to the parameter name (the correct syntax can be retrieved using "ha-cfg get") and <value> represents the new value for that parameter. Refer to the configuration file documentation for a list of supported values.

get-vm-ha
The "get-vm-ha" action lists all VMs within the pool and indicates whether HA is enabled for each VM. Additional information is displayed based on the poolâ€™s setting context. This tool is valuable for quickly determining the HA status of any VM.

set-vm-ha
The "set-vm-ha" action enables or disables HA for the specified VM, identified by its name-label. The name-label must match the exact name of the VM. The value must be either true or false.

Important: If the VM name-label contains spaces, enclose it in single or double quotes as follows:
ha-cfg set-vm-ha "VM name with spaces" true

status
The "status" action shows whether HA is enabled or disabled for the pool and allows for toggling the status. This command should be used to enable/disable HA for the pool, as shown below.

backup
Usage: <ha-cfg backup /path/to/file/filename>
The backup command creates a backup file of the pool configuration settings for HA-Lizard. A filename must be provided to specify the path and name of the backup file.

restore
Usage: <ha-cfg restore /path/to/file/filename>
The restore command restores a previously backed-up configuration file. A filename must be provided. The restore command should be executed on a single host in the pool (any host, regardless of master/slave status). The settings will be applied to all hosts in the pool. When restoring new monitor timers or triggers, a restart of the HA-Lizard service is required for the host to apply the new settings. The service will be automatically restarted on the host where the restore command is run. It is recommended to manually restart the service on other hosts using "service ha-lizard restart".

restore-default
Usage: <ha-cfg restore-default>
Restores default configuration parameters to the pool database.

email
Usage: <ha-cfg email>
The email command sends a test email alert using the configured email settings. This is useful for testing the email alert configuration to ensure it works correctly. Sample output is shown below.

email_debug
Usage: <ha-cfg email_debug>
The email_debug command is similar to the email command but provides verbose SMTP logs, outputting them to stdout. This is helpful when troubleshooting SMTP issues.

########################

# Global Configuration

########################
Global configuration parameters are stored in the XAPI database, which is shared across all hosts in a pool. The "ha-cfg" command-line tool is used to make changes to any global parameters. To view the current configuration, use "ha-cfg get".

Any global configuration parameter can be updated with the "ha-cfg set" command. For example, to disable logging globally, use:
"ha-cfg set enable_logging 0"

############################

# Configuration Parameters

############################
HA Monitor Configuration

The HA service is managed by a monitoring service that runs continuously. The following settings configure the behavior of the monitor. The default settings installed by the provided installer are typically suitable for most environments. After installation, the Monitor will run as a service continuously. You can check the status with the command: "service ha-lizard status". As of version 1.7.7, the default parameters are optimized for a 2-node pool, with fast detection and role-switching (failure detection in less than 15 seconds). However, some values may need adjustment depending on the environment. Host performance and pool size should be considered when configuring these parameters.

The Monitor launches several HA processes in a loop every 15 seconds (MONITOR_DELAY). The default value of 15 seconds is designed for small 2-node pools. For larger pools, a higher value, such as 45 seconds, may be more appropriate. System logs should be monitored to ensure all HA processes complete within the MONITOR_DELAY window. Increasing the MONITOR_DELAY will slow failure detection, while decreasing it will make failure detection and recovery faster. Always consider system performance and preferences when adjusting these values.

monitor_max_starts
Defines the threshold for determining when running processes are unresponsive. It sets how many failed starts are tolerated before terminating hung processes. This value should be set high to avoid prematurely killing processes in case of transient issues. The default value is 20.

monitor_killall
If the MAX_MONITOR_STARTS threshold is reached, this option specifies whether to terminate all HA-Lizard processes. Default = 1 (yes).

monitor_delay
Defines the delay in seconds between attempts to respawn HA-Lizard. This value should be adjusted based on the environment. Larger pools will need more time for each run. Default = 15 seconds.

monitor_scanrate
Specifies the delay before reattempting to spawn HA-Lizard if there are active processes. The system waits the number of seconds specified here before retrying. Each successive failure increments a counter (MONITOR_MAX_STARTS), which may trigger KILLALL. Default = 10 seconds.

xc_field_name
Specifies the field name used to enable or disable HA for the pool. This field can also be set within XenCenter to enable/disable HA. To make this field visible in XenCenter, create a custom pool-level field with this name.

op_mode
Specifies the operating mode for HA-Lizard:

- 1 = manage appliances
- 2 = manage virtual machines (default)
  Mode 1 is designed for small pools where HA can automatically manage appliances without additional configuration. Mode 2 offers more granular control, enabling HA management for specific VMs.

global_vm_ha
Specifies whether to enable HA for each VM individually when OP_MODE = 2.

- 0 = Individual VM HA must be manually set.
- 1 = All VMs have HA enabled by default.
  Default = 1.

enable_logging
Enables or disables logging (1 = enabled, 0 = disabled). Logs are written to /var/log/messages and are labeled with "ha-lizard" for easy filtering. View logs in real-time with:
"tail -f /var/log/messages | grep ha-lizard"

enable_alerts
Enables or disables alerts (1 = enabled, 0 = disabled). Alerts are system-wide and can be viewed in XenCenter or via CLI. Alerts also include email notifications.

disabled_vapps
Specifies the UUID(s) of virtual appliances that should not be automatically started by HA-Lizard when OP_MODE = 1. The UUIDs are separated by colons (UUID1:UUID2:UUID3). Leave blank if all appliances should be managed.

xe_timeout
Defines the maximum wait time for XE toolstack calls to respond. If XE does not respond within XE_TIMEOUT seconds, the xe PID is terminated to avoid hanging during Master host failure. Default = 5 seconds.

xapi_count
Sets the number of retry attempts for XAPI when a pool member cannot reach a peer. If the unresponsive host is recovered before the retries are exhausted, attempts to fence and remove the host will be ignored. Default = 2.

xapi_delay
Sets the number of seconds to wait between XAPI retry attempts. Default = 10 seconds.

slave_ha
If the Pool Master is unreachable and all retry attempts fail, this setting specifies whether the autoselected slave should attempt to start appliances or VMs. (Requires PROMOTE_SLAVE set to 1).

promote_slave
If the pool master is unreachable, specifies whether the slave should be promoted to pool master. This only affects a single slave, chosen automatically to recover the pool.

slave_vm_stat
Determines whether slaves also check the status of all VMs and attempt to start any VM that is not running. Default = 0.

Email Alert Settings:

- mail_on: Enables/disables email alerts (1 = enabled, 0 = disabled)
- mail_subject: Subject line for email alerts
- mail_from: FROM address for email alerts
- mail_to: Recipient email address
- smtp_server: SMTP server address for sending alerts
- smtp_port: SMTP server port
- smtp_user: SMTP username (if authentication is required)
- smtp_pass: SMTP password (if authentication is required)

Fencing Configuration Settings:
Supported FENCE_METHOD values include ILO, XVM, POOL, and IRMC. Custom fencing agents can also be defined here.

fence_enabled
Enables or disables fencing (1 = enabled, 0 = disabled)

fence_file_loc
Specifies the location for storing and retrieving fencing scripts.

fence_ha_onfail
Determines whether to attempt starting VMs from a failed host on another host if fencing fails (1 = enabled, 0 = disabled).

fence_method
Specifies the fencing method to be used (e.g., ILO, XVM, POOL).

fence_passwd
Password for the fencing device (if required).

fence_action
Supported actions: start, stop, reset.

fence_reboot_lone_host
Determines whether the Master host reboots before attempting to fence peers if no other pool members are available. Default = 0.

fence_ipaddress
Used for static fencing devices, such as XVM. It can be configured for custom scripts using a static IP.

fence_host_forget
Will be deprecated in future versions. Set to 0 for best practice.

fence_min_hosts
Defines the minimum number of hosts required before fencing can be performed. Default = 2.

fence_quorum_required
Specifies whether quorum is required from the remaining hosts before fencing can occur (1 = enabled, 0 = disabled).

fence_use_ip_heuristics
Defines whether to use additional IPs to help determine quorum, which is helpful in 2-node pools. Default = 0.

fence_heuristics_ips
Specifies a list of IPs or domain names to check for quorum determination. Multiple addresses should be separated by colons.

mgt_link_loss_tolerance
Defines the number of seconds before VMs are forcibly shut down on a Master host that loses its management link. Default = 5 seconds.

disk_monitor
Enables hourly disk health monitoring and triggers alerts for non-normal SMART flags. Default = 1 (enabled).

enable_alerts
Enables or disables pool-wide alerts (1 = enabled, 0 = disabled). Alerts can be viewed through management tools or CLI.
